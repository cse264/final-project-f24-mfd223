Spring Backend README

Generated by AI

This is the backend part of the project. It uses Spring Boot for server-side processing and RESTful APIs to communicate with the frontend.
Directory Structure

spring-backend/
├── src/
│   ├── main/
│   │   ├── java/com/example/demo/
│   │   │   ├── controller/       # REST Controllers (handle API requests)
│   │   │   ├── model/            # Data Models (user and weather data)
│   │   │   ├── repository/       # Database Access (manage database operations)
│   │   │   ├── service/          # Business Logic (handle main application logic)
│   │   │   └── exception/        # Custom Exceptions (error handling)
│   │   └── resources/
│   │       ├── static/           # Static resources (HTML, CSS, etc.)
│   │       └── application.properties  # Configuration file (port and database settings)
└── pom.xml                        # Maven build file

How to Start the Backend

    Install Maven (if not installed).
        Verify with:

    mvn -v

Run the application:

    Navigate to spring-backend/ directory.
    Use the following command to start the server:

        mvn spring-boot:run

        The backend will start on port 8081.

    Access the server:
        Open http://localhost:8081 in your browser.
        For RESTful API testing, use tools like Postman.

How to Clean the Project

To clean up compiled files and reset the project build, run:

mvn clean

RESTful API Guide

This backend provides several APIs for user and weather data management. Below is a list of the main endpoints.
1. User Registration

    URL: /api/users/register
    Method: POST
    Request Body (JSON):

    {
        "username": "testuser",
        "password": "testpassword",
        "paidUser": true
    }

    Response:
        200 OK: User registered successfully
        400 BAD REQUEST: Username already exists or invalid input.

2. User Login

    URL: /api/users/login
    Method: POST
    Request Body (JSON):

{
    "username": "testuser",
    "password": "testpassword"
}

Response:

    200 OK:

        {
            "id": 1,
            "username": "testuser",
            "paidUser": true
        }

        400 BAD REQUEST: Invalid credentials

3. Get Weather Data

    URL: /api/weather

    Method: GET

    Query Parameters:
        city: Name of the city.
        paidUser: Boolean to indicate if the user is paid (true/false).

    Example:

http://localhost:8081/api/weather?city=NewYork&paidUser=true

Response:

    200 OK (Paid user):

        {
            "city": "New York",
            "country": "US",
            "temperature": 25,
            "description": "clear sky"
        }

        403 FORBIDDEN: Free users cannot access locations outside the US.

Notes for Frontend Developers

    Backend is running on http://localhost:8081.
    Send all API requests to /api/users for user management and /api/weather for weather data.
    Backend accepts JSON format for both requests and responses.
    Validate API responses and handle possible errors like 400 or 403.
    For testing API endpoints, use tools like Postman.

If you have questions or need help, contact the backend team.